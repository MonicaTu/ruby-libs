module Stats

  def self.silhouette(dataset, clust, distance, varargin)
    ret = [] 
    # TODO: silhouette algorithm

    return ret
  end

end

dataset = [
    [-0.4125, -0.4542, -0.5629, -0.3969, -0.5167, -0.5375, -0.4399, -0.4751, -0    .472, -0.5134, -0.4073, -0.6061, -0.4843, -0.437, -0.46, -0.594, -0.5445], #3
    [-2.0269, -1.7235, -1.384, -1.6091,     -1.699, -1.6737, -1.6556, -1.6498, -1.6364, -1.6737, -1.8153, -1.5867, -1.4802, -1.567, -1.6038, -1.6271, -1.649    8], #1 
    [-0.582, -0.9838, -1.0711, -1.1221, -1.15, -1.0958, -1.0039, -1.109, -1.15, -1.1361, -1.2125, -1.1805, -1.071    1, -1.0958, -1.3261, -1.2291, -1.0958], #1
    [-0.2364, 0.0794, 0.1678, 0.2389, 0.3847, 0.2625, 0.1889, 0.2681, 0.0363, -0.1992, -0.0521, -0.0307, 0.0584, 0.2    817, 0.2239, -0.0253, 0.0751], #2 
    [-0.6929, -0.8948, -0.6405, -0.1023, 0.1816, 0.163, 0.1657, 0.1114, -0.0783, -0.04    19, -0.1849, -0.402, -0.466, -0.4098, -0.5035, -0.6451, -0.7298], #2
    [-1.2291, -1.5129, -1.266, -1.1649, -1.2125, -1.2291, -1.109, -1.0958, -1.3    054, -1.2848, -1.5867, -1.9281, -1.2125, -1.2125, -1.2848, -2.0269, -1.3716], #1 
    [-0.1517, 0.0081, -0.065, 0.0021, -0.0275, -0.1    277, -0.0921, -0.0475, -0.065, -0.002, -0.0627, 0.0345, -0.0396, 0.0373, 0.022, 0.0122, -0.0545], #2
    [-0.3156, -0.35    78, -0.2225, -0.1195, -0.301, -0.2294, -0.3051, -0.249, -0.2157, -0.2191, -0.1849, -0.1849, -0.2008, -0.2694, -0.    2311, -0.2752, -0.2364], #2
    [-0.1725, -0.5375, -0.497, -0.3818, -0.527, -0.426, -0.6929, -0.402, -0.3263, -0.3373, -0.3532, -0.2771, -0.2732    , -0.3307, -0.466, -0.4314, -0.3135], #3
    [-0.1992, 0.0316, -0.0735, -0.1445, -0.1222, -0.0521, -0.0735, -0.1502, -0.1182, -0.065,     -0.1445, -0.1896, -0.1725, -0.1864, -0.1849, -0.0419, -0.1374], #2
    [-0.8564, -0.994, -1.3716, -1.0958, -1.2291, -1.0711, -1.3261, -1.15, -0.9838, -1.083, -1.2125, -1.1959, -1.3054    , -1.2848, -1.3969, -1.451, -1.2125], #1 
]

clust = [3, 1, 1, 2, 2, 1, 2, 2, 3, 2, 1]

def median(array)
  sorted = array.sort
  len = sorted.length
  return (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0
end

si = stats.silhouette(dataset, clust, nil, nil)
p median(si) # Silhouette Index
